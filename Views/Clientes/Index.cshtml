@using ClienteCadastroApplication.Controllers
@using ClienteCadastroApplication.Tools
@model ClienteCadastroApplication.Models.ClientesViewModel

@{
    var Title = Model.Title;
    var htmlAttr = new Dictionary<string, object>();
    var actName = nameof(ClientesController.Index);
}

@using (Html.BeginForm(actName, "Clientes", FormMethod.Post))
{
    <div class="card">
        <div class="card-header" style="clear:both;">
            <h5 style="float: left;">Consultar - @Title</h5>
            <div style="float: right;">
                @{
                    var link = Url.Action(nameof(ClientesController.Create), null);
                    var createButton = $"<a href='{link}' class='btn btn-success btn-sm'><i class='bi bi-plus' aria-hidden='true'></i>Novo</a>";
                }
                @Html.Raw(createButton)
            </div>
        </div>

        <div class="card-body">
            <div class="row">
                <div class="col-lg-4 d-flex flex-column">
                    @{
                        htmlAttr = new Dictionary<string, object>();
                        htmlAttr.Add("class", "form-control");
                    }
                    <strong>@Html.LabelFor(x => x.Nome)</strong>
                    @Html.EditorFor(x => x.Nome, new { htmlAttr })
                </div>
                <div class="col-lg-2 d-flex flex-column">
                    @{
                        htmlAttr = new Dictionary<string, object>();
                        htmlAttr.Add("class", "form-select selectpicker");
                    }
                    <strong>@Html.LabelFor(x => x.TipoPessoa, "Tipo")</strong>
                    @Html.DropDownListFor(x => x.TipoPessoa, DocT.GetSelListTipo(DocT.DefTipo), new { htmlAttr })
                </div>
                <div class="col-lg-3 d-flex flex-column">
                    @{
                        htmlAttr = new Dictionary<string, object>();
                        htmlAttr.Add("class", "form-control");
                    }
                    <strong>@Html.LabelFor(x => x.Documento)</strong>
                    @Html.EditorFor(x => x.Documento, new { htmlAttr })
                </div>

                <div class="col-lg-2">
                    <label>&nbsp;</label>
                    <button type="submit" value="Pesquisar" class="form-control btn btn-info">
                        <i class='bi bi-search' aria-hidden='true'></i>
                        &nbsp;Pesquisar
                    </button>
                </div>
            </div>

        </div>
    </div>

    <hr />

    <table class="table table-sm table-hover table-striped">
        <thead>
            <tr>
                <th style="text-align: right;">Id</th>
                <th style="text-align: left;">Nome</th>
                <th style="text-align: left;">Tipo</th>
                <th style="text-align: left;">Documento</th>
                <th style="text-align: left;">Dt. Registro</th>
                <th style="text-align: left;">Telefone</th>

                <th style="text-align: center;">Editar</th>
                <th style="text-align: center;">Excluir</th>
            </tr>
        </thead>
        <tbody>
            @for (int idx = 0; idx < Model.PagedList?.Count; idx++)
            {
                var reg = Model.PagedList[idx];
                var route = Model.RouteRegistry(reg);
                <tr>

                    <td style="text-align: right;">
                        @reg.Id
                    </td>
                    <td style="text-align: left;">
                        @reg.Nome
                    </td>
                    <td style="text-align: left;">
                        @reg.Tipo
                    </td>
                    <td style="text-align: left;">
                        @reg.Documento
                    </td>
                    <td style="text-align: left;">
                        @reg.DataCadastro.Value.ToShortDateString()
                    </td>
                    <td style="text-align: left;">
                        @reg.Telefone
                    </td>

                    <td style="text-align:center;">
                        @{
                            link = Url.Action(nameof(ClientesController.Edit), route);
                            var editButton = $"<a href='{link}' class='btn btn-warning btn-sm'><i class='bi bi-pencil' aria-hidden='true'></i></a>";
                        }
                        @Html.Raw(editButton)
                    </td>

                    <td style="text-align:center;">
                        @{
                            link = Url.Action(nameof(ClientesController.Delete), route);
                            var deleteButton = $"<a href='{link}' class='btn btn-danger btn-sm'><i class='bi bi-trash' aria-hidden='true'></i></a>";
                        }
                        @Html.Raw(deleteButton)
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@section Scripts {
    <script>
        function applyMask() {
            let tipo = document.getElementById("TipoPessoa").value;
            let documento = document.getElementById("Documento");

            documento.value = documento.value.replace(/\D/g, "");

            if (tipo === "PF") {
                documento.setAttribute("maxlength", "14");
                documento.value = documento.value
                    .replace(/^(\d{3})(\d)/, "$1.$2")
                    .replace(/^(\d{3})\.(\d{3})(\d)/, "$1.$2.$3")
                    .replace(/\.(\d{3})(\d)/, ".$1-$2");
            } else if (tipo === "PJ") {
                documento.setAttribute("maxlength", "18");
                documento.value = documento.value
                    .replace(/^(\d{2})(\d)/, "$1.$2")
                    .replace(/^(\d{2})\.(\d{3})(\d)/, "$1.$2.$3")
                    .replace(/\.(\d{3})(\d)/, ".$1/$2")
                    .replace(/(\d{4})(\d)/, "$1-$2");
            }
        }

        document.getElementById("TipoPessoa").addEventListener("change", applyMask);
        document.getElementById("Documento").addEventListener("input", applyMask);
    </script>
}